{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2020/03/react-boilerplate-com-redux-e-typescript/","result":{"data":{"site":{"siteMetadata":{"title":"Matt Developer","author":"Matt Developer"}},"markdownRemark":{"id":"73f8d647-b78f-514b-9316-3bba3f466f15","excerpt":"Fala Dev! Com certeza você já teve que iniciar vários projetos em React e teve um trabalho um tanto quanto chato e repetitivo de configurar o seu projeto em…","html":"<p>Fala Dev! Com certeza você já teve que iniciar vários projetos em React e teve um trabalho um tanto quanto chato e repetitivo de configurar o seu projeto em React com <strong>Redux + TypeScript</strong> né? Agora você não terá mais esse problema! Vou apresentar a vocês o meu React Boilerplate.</p>\n<h2>React Boilerplate</h2>\n<p>Depois de muito estudo e vários projetos realizados eu mais alguns amigos chegamos a uma estrutura de pastas para trabalhar com Redux e TypeScript no React e agora eu venho aqui trazer esta MARAVILHA de estrutura para vocês. Sabe o que é melhor? É só clonar e começar a programar. O projeto já vem até com uma lógica de rotas autenticadas para você implementar o seu próprio sistema de autenticação. Aqui vai uma lista das vantagens que você tem em utilzar esse esqueleto:</p>\n<ul>\n<li>TSLint e Prettier configurados</li>\n<li>Estrutura de pastas escalável</li>\n<li>Redux com redux persist</li>\n<li>Projeto todo em TypeScript</li>\n<li>Rotas com autenticação</li>\n<li>Estado de conexão do usuário</li>\n<li>Modal de atualização para PWAs</li>\n</ul>\n<p>Obs: Em breve farei um post sobre cada uma das features acima, explicando como elas funcionam e também como implementá-las em seus próprios projetos.</p>\n<h2>Passo a passo</h2>\n<p>Clone o repositório <a href=\"https://github.com/oprogramadormoderno/react-boilerplate\" target=\"_blank\" rel=\"nofollow\">React Boilerplate</a>: <code class=\"language-text\">git clone https://github.com/oprogramadormoderno/react-boilerplate.git</code></p>\n<p>Entre dentro do repositório, execute o comando yarn e inicie o server:</p>\n<p><code class=\"language-text\">cd react-boilerplate &amp;&amp; yarn &amp;&amp; yarn start</code></p>\n<h2>Estrutura das pastas</h2>\n<p>Todo o nosso código se encontra dentro da pasta <i>src</i>.</p>\n<p><b>src/assets</b>: Aqui ficam todos os assets do nosso projeto, tais como imagens, ícones, scss, svgs, etc.</p>\n<p><b>src/components</b> Aqui ficam todos os nossos componentes globais, ou seja, aquele que usaremos 2 ou mais vezes em diferentes lugares da nossa aplicação.</p>\n<p><b>src/interfaces</b> Aqui ficam todos os nossos arquivos de tipagem. Basicamente são nossas <i>interfaces</i>, <i>enums</i> e <i>types</i> que serão usados em todo o projeto.</p>\n<p><b>src/screens</b> Aqui ficam todas das telas da nossa aplicação.</p>\n<p><b>src/store</b> Aqui fica toda a lógica do nosso redux, já com um exemplo autenticação e de estado de conexão do usuário funcionando.</p>\n<p><b>src/utils</b> Aqui ficam nossas utilidades, funções que usaremos no projeto entre outras coisas.</p>\n<h2>Estrutura dos componentes</h2>\n<p>Segue um exemplo de estrutura dos nossos componentes: (lembrando que não precisamos ter todos esses arquivos criados, só os que iremos usar no componente)</p>\n<ul>\n<li><i>example.component.tsx</i> o arquivo do nosso componente</li>\n<li><i>example.style.ts</i> todos os estilos referente ao componente</li>\n<li><i>example.type.ts</i> tipagem do nosso componente</li>\n<li><i>example.utils.ts</i> utilidades usadas no componente</li>\n</ul>\n<p>Em breve farei um post sobre estrutura de pastas do React para melhor explicar o método que utilizamos aqui. Por enquanto é isso, sinta-se à vontade para mandar suas dúvidas pelo direct do instagram ou twitter, vai ser um prazer ajudá-los. Caso tenha alguma contribuição para qualquer um dos projetos Open Source que posto aqui, pode ir lá no nosso repositório e contibruir ou abrir suas issues.</p>","frontmatter":{"title":"React Boilerplate com Redux e TypeScript","date":"March 28, 2020","description":"Um boilerplate de React com as principais funcionalidades que você precisa para fazer o seu projeto com Redux e TypeScript de forma esvalável."}}},"pageContext":{"slug":"/blog/2020/03/react-boilerplate-com-redux-e-typescript/","previous":{"fields":{"slug":"/2019/09/como-aprender-react-em-2019/"},"frontmatter":{"title":"Como aprender React em 2019"}},"next":null}}}